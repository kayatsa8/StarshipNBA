version: "3.9"

volumes:
  certs:
    driver: local
  elasticsearch-data:
    driver: local
  kibana-data:
    driver: local
  logstash-data:
    driver: local
  logs:
    external: true
    name: starshipnba_logs

networks:
  default:
    name: starship-network
    external: false

services:
  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: elasticsearch\n"\
          "    dns:\n"\
          "      - elasticsearch\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: kibana\n"\
          "    dns:\n"\
          "      - kibana\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://elasticsearch:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://elasticsearch:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/elasticsearch/elasticsearch.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120

  elasticsearch:
    depends_on:
      setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    labels:
      co.elastic.logs/module: elasticsearch
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    environment:
      - node.name=elasticsearch
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=elasticsearch
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/elasticsearch/elasticsearch.key
      - xpack.security.http.ssl.certificate=certs/elasticsearch/elasticsearch.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/elasticsearch/elasticsearch.key
      - xpack.security.transport.ssl.certificate=certs/elasticsearch/elasticsearch.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
#    mem_limit: ${ES_MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  kibana:
    depends_on:
      elasticsearch:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    labels:
      co.elastic.logs/module: kibana
    volumes:
      - certs:/usr/share/kibana/config/certs
      - kibana-data:/usr/share/kibana/data
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
      - XPACK_SECURITY_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_REPORTING_ENCRYPTIONKEY=${ENCRYPTION_KEY}
#    mem_limit: ${KB_MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  logstash:
    depends_on:
      elasticsearch:
        condition: service_healthy
      kibana:
        condition: service_healthy
    image: docker.elastic.co/logstash/logstash:${STACK_VERSION}
    labels:
      co.elastic.logs/module: logstash
    user: root
    volumes:
      - logstash-data:/usr/share/logstash/data
      - certs:/usr/share/logstash/certs
      - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
#      - ./myLog.log:/usr/share/logstash/logs/myLog.log
    environment:
      - NODE_NAME="logstash"
      - xpack.monitoring.enabled=false
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=https://elasticsearch:9200
    command: logstash -f /usr/share/logstash/pipeline/logstash.conf
    ports:
      - "5044:5044/udp"
#    mem_limit: ${LS_MEM_LIMIT}

  filebeat-all:
    image: docker.elastic.co/beats/filebeat:${STACK_VERSION}
    container_name: filebeat-all
    user: root
    command: --strict.perms=false
    volumes:
      - ./filebeat-conf/filebeat-all.yml:/usr/share/filebeat/filebeat.yml:ro
      - logs:/allLogs
#      - /var/lib/docker/containers:/var/lib/docker/containers:ro
#      - ./myLog.log:/logs/myLog.log -> host volume for single file
#      - ../containersLogs:/logs_from_springboot -> host volume for a folder
    depends_on:
      - logstash

#  filebeat-service-discovery:
#    image: docker.elastic.co/beats/filebeat:${STACK_VERSION}
#    container_name: filebeat-service-discovery
#    user: root
#    command: --strict.perms=false
#    volumes:
#      - ./filebeat-conf/filebeat-service-discovery.yml:/usr/share/filebeat/filebeat.yml:ro
#      - logs:/serviceDiscoveryLogs
#    depends_on:
#      - logstash
#
#  filebeat-gateway:
#    image: docker.elastic.co/beats/filebeat:${STACK_VERSION}
#    container_name: filebeat-gateway
#    user: root
#    command: --strict.perms=false
#    volumes:
#      - ./filebeat-conf/filebeat-gateway.yml:/usr/share/filebeat/filebeat.yml:ro
#      - logs:/gatewayLogs
#    depends_on:
#      - logstash
#
#  filebeat-nba:
#    image: docker.elastic.co/beats/filebeat:${STACK_VERSION}
#    container_name: filebeat-nba
#    user: root
#    command: --strict.perms=false
#    volumes:
#      - ./filebeat-conf/filebeat-nba.yml:/usr/share/filebeat/filebeat.yml:ro
#      - logs:/nbaLogs
#    depends_on:
#      - logstash
#
#  filebeat-population:
#    image: docker.elastic.co/beats/filebeat:${STACK_VERSION}
#    container_name: filebeat-population
#    user: root
#    command: --strict.perms=false
#    volumes:
#      - ./filebeat-conf/filebeat-population.yml:/usr/share/filebeat/filebeat.yml:ro
#      - logs:/populationLogs
#    depends_on:
#      - logstash
#
#  filebeat-gnews:
#    image: docker.elastic.co/beats/filebeat:${STACK_VERSION}
#    container_name: filebeat-gnews
#    user: root
#    command: --strict.perms=false
#    volumes:
#      - ./filebeat-conf/filebeat-gnews.yml:/usr/share/filebeat/filebeat.yml:ro
#      - logs:/gnewsLogs
#    depends_on:
#      - logstash
#
#  filebeat-ui:
#    image: docker.elastic.co/beats/filebeat:${STACK_VERSION}
#    container_name: filebeat-ui
#    user: root
#    command: --strict.perms=false
#    volumes:
#      - ./filebeat-conf/filebeat-ui.yml:/usr/share/filebeat/filebeat.yml:ro
#      - logs:/uiLogs
#    depends_on:
#      - logstash